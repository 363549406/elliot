# Pro Git


# 1.1 About Version Control

1. Local Version Control Systems  	   # 本地
2. Centralized Version Control Systems # 有一个中心vcs server，各台pc只会获取最新版本代码
3. Distributed Version Control Systems # 每个pc上都会有完整的version database

所以2中如果中心vcs server丢失就没有了version database，而3中每台pc都可以恢复version database
不同于1和2中如SVN中存储的是changes（diff），re-create的时候需要adding up all the patches。而3中使用的是snapshot（快照），这使得git特别快。


# 1.3 Getting Started - Git Basics

Snapshots, not differences

commit的时候，git take a picture of 所有文件并store a reference to that snapshot. 为了提高效率，如果文件没有改变，Git不会再存储一遍那个文件，而是会link to先前已经存储过的文件。

Git中有working directory - Staging Area - .git directory (Repository) 三个States。

working directory (stage fixes ->) Staging Area (commit ->) .git directory

working directory (<- checkout the project) .git directory


# 1.6 Getting Staarted - First-Time Git Setup

1. /etc/gitconfig - git config --system - all users
2. ~/.gitconfig or ~/.config/git/config - git config --global - the user
3. repository/.git/config - git config --local or git config - single repository

首先要设置user.name和user.email因为每次commit都会用到这两个信息


# 1.7 Getting Staarted - Getting Help

查看man
$ git help <verb>
$ man git-<verb>

参看参数
$ git <verb> -h

IRC channel - irc.freenode.net #git #github


# 2.1 Git Basics - Getting a Git Repository

$ git init 会创建名为.git的子目录，含有初始化的Git仓库中所有的必须文件，但是项目里的文件还没有被tracked

$ git clone https://github.com/libgit2/libgit2 
会把project中所有history version的数据都拉取下来。Git有不同的transfer protocol，如https、git:// (ssh)


# 2.2 Git Basics - Recordig Changes to the Repository

working directory中的文件可以有tracked和untracked两种状态。

untracked           unmodified           modified           staged
   |--add the file to the next commit------------------------->|
   |                     |--edit file------>|
   |                     |                  |--stage file----->|
   |<---remove file------|                  
   |                     |<----------------commit--------------|

.gitignore文件中设置不想tracked的文件，.gitignore的格式规范

1. # 被git忽略
2. 标准的glob模式匹配 如 *.pyc
3. 以(/)开头防止递归  /TODO 值忽略当前目录下的TODO文件，不会subdir/TODO
4. 以(/)结尾指定目录  build/
5. 要忽略指定模式以外的文件或目录，可以在模式前加(!)取反  如果.gitignore已经有*.a 再有 !lib.a 还是会track lib.a的。

$ git diff 会查看working directory和staged的差别，--staged或--cached查看staged和上次commit之间的差别，是要提交的信息。
$ git difftool 命令用其他输出方式如vimdiff来输出diff分析结果

$ git commit 提交 -m选项将提交信息和命令放在一起。-a选项可以把所有已经tracked的文件暂存起来一并提交。

从git中移除文件，需要从tracked files中移除文件并且commit。rm只是从working space中删除，git rm才是从tracked file中也删除。$ git rm --cached README 是从staging area中移除但是keep it in your working space

$ git mv file_from file_to 移动文件。再用$ git status查看的时候会提示renamed信息


# 2.3 Git Basics - Viewing the Commit History

$ git log 查看history信息。-p or --patch参数show the difference (the patch output) introduced in each commit, -n指定limit有几个commit会显示。--stat参数显示each commit entry a list of modifed files. --pretty参数改变format，有用的--pretty=oneline/short/full/fuller，--pretty=format:"%h - %an, %ar : %s"可以自定义格式。--graph参数add a nice little ASCII graph showing your branch and merge history.

Limiting Log Output

1. --since and --until  $ git log --since=2.weeks 日期格式很多 "2018-01-15" or "2 years 1 day 3 minutes ago"
2. --author filter on a specific author
3. --grep search for keywords in the commit messages
4. -S   which takes a string and shows only those commits that changed the number of occurrences of that string
5. specify a directory or file name, limit the log output to a commits that introduced a change to those files. (also preceded by double dashes -- to sperate the path from the options.)
6. --no-merges  使用的workflow可能会导致log中有很多merge的commit，此参数，去除那类信息。


# 2.4 Git Basics - Undoing Things





# 10.2 Git Internals - Git Objects


